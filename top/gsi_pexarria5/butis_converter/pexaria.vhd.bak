LIBRARY ieee ;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

ENTITY pexaria IS 
	PORT ( clk      : IN STD_LOGIC; -- BuTis 200MHz input through extension port 9 pin
--	       osc      : IN  STD_LOGIC; -- local 125MHz quartz
			 io1      : OUT STD_LOGIC; --output 10MHz
			 io2      : IN  STD_LOGIC; --input 100KHz
			 io3      : OUT STD_LOGIC; --output 100KHz
			 TTLEN1   : OUT STD_LOGIC;                                                   
			 TTLEN2   : OUT STD_LOGIC;
			 TTLEN3   : OUT STD_LOGIC;
			 TTLTERM1 : OUT STD_LOGIC;
			 TTLTERM2 : OUT STD_LOGIC;
			 TTLTERM3 : OUT STD_LOGIC;
			 LED1     : OUT STD_LOGIC; --conrol LED1
			 LED2     : OUT STD_LOGIC; --conrol LED2
			 LED3     : OUT STD_LOGIC; --conrol LED3
			 LED4     : OUT STD_LOGIC; --conrol LED4
			 LED5     : OUT STD_LOGIC; --conrol LED4
			 LED6     : OUT STD_LOGIC; --conrol LED4
			 LED7     : OUT STD_LOGIC; --conrol LED4
			 
			 button   : IN STD_LOGIC; --reset the count1 to zero and turn off the LED1
	 -----------------------------------------------------------------------
    -- usb
    -----------------------------------------------------------------------
    slrd            : out   std_logic;
    slwr            : out   std_logic;
    fd              : inout std_logic_vector(7 downto 0) := (others => 'Z');
    pa              : inout std_logic_vector(7 downto 0) := (others => 'Z');
    ctl             : in    std_logic_vector(2 downto 0);
    uclk            : in    std_logic;
    ures            : out   std_logic); 
			 		 
END pexaria ; 

ARCHITECTURE LogicFunction OF pexaria IS
   signal foo : std_logic;--10MHz
	signal count : unsigned(6 DOWNTO 0);
	signal counterror : unsigned(6 DOWNTO 0); -- count for the mis synchronization 
	signal last :std_LOGIC;
	signal lastb :std_LOGIC;
   signal clk_200_local : std_logic;

--   component pll is
--		port (
--			refclk   : in  std_logic := '0'; --  refclk.clk
--			rst      : in  std_logic := '0'; --   reset.reset
--			outclk_0 : out std_logic         -- outclk0.clk
--		);
--   end component;
	
BEGIN
--   apll : pll port map(
--	  refclk => osc,
--	  outclk_0 => clk_200_local);
	
	TTLEN1 <= '0'; -- enable output
	TTLEN2 <= '1'; -- disable output (input)
	TTLEN3 <= '0'; -- enable output
	
	TTLTERM1 <= '0'; -- disconnect 50Ohm termination
	TTLTERM2 <= '1'; -- terminate input with 50Ohm
	TTLTERM3 <= '0'; -- disconnect 50Ohm termination
	
	process(clk) is 
		BEGIN
		if rising_edge(clk) then 
			if (lastb = '1' and button = '0') then
				counterror <= "0000000";
			end if;	
			if (last = '1' and io2 = '0') then
				foo <= '0'; 
				if (count /= 19) then --detect the dis synchronization
					counterror <= counterror + 1;
				end if;
				count <= (others => '0');
			else
				if (count = 9) then --foo 100KHz positive pulse
					count <= count + 1;
					foo <= '1';
				else
					if (count = 19) then --foo 100KHz negative pulse
					count <= (others => '0');
					foo <= '0'; 
					else 
					count <= count + 1;
					end if;
				end if;
			end if;
		   last <= io2;
			lastb <= button;
		end if;

	end process;
   io1 <= foo;
	io3 <= io2;
	
	LED2 <= 'Z';
	LED3 <= 'Z';
	LED4 <= 'Z';
	LED5 <= 'Z';
	LED6 <= 'Z';
	LED7 <= 'Z';

	LED1 <= 'Z' when counterror = 0 else '0';
	
--	LED2 <= '0' when counterror(1)='1' else 'Z';
--	LED3 <= '0' when counterror(2)='1' else 'Z';
--	LED4 <= '0' when counterror(3)='1' else 'Z';
--	LED5 <= '0' when counterror(4)='1' else 'Z';
--	LED6 <= '0' when counterror(5)='1' else 'Z';
--	LED7 <= '0' when counterror(6)='1' else 'Z';
	

END LogicFunction ;